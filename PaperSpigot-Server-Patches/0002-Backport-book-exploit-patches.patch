From d9cbe4f1c8fa3354c1d1f6dec8386556d3cd2f11 Mon Sep 17 00:00:00 2001
From: Shane Freeder <theboyetronic@gmail.com>
Date: Sat, 16 Dec 2017 17:43:12 +0000
Subject: [PATCH] Backport book exploit patches


diff --git a/src/main/java/net/minecraft/server/PlayerConnection.java b/src/main/java/net/minecraft/server/PlayerConnection.java
index 4391ad7e7..65093c89c 100644
--- a/src/main/java/net/minecraft/server/PlayerConnection.java
+++ b/src/main/java/net/minecraft/server/PlayerConnection.java
@@ -89,6 +89,7 @@ public class PlayerConnection implements PacketListenerPlayIn, IUpdatePlayerList
     private double q;
     private boolean checkMovement = true;
     private boolean processedDisconnect; // CraftBukkit - added
+    private int lastBookTick = MinecraftServer.currentTick; // Alphheim - Backport book patches
 
     public PlayerConnection(MinecraftServer minecraftserver, NetworkManager networkmanager, EntityPlayer entityplayer) {
         this.minecraftServer = minecraftserver;
@@ -1976,6 +1977,14 @@ public class PlayerConnection implements PacketListenerPlayIn, IUpdatePlayerList
 
         try { // CraftBukkit
         if ("MC|BEdit".equals(packetplayincustompayload.a())) {
+            // Alphheim Start
+            if (this.lastBookTick + 20 > MinecraftServer.currentTick) {
+                this.disconnect("Book edited too quickly!");
+                return;
+            }
+            this.lastBookTick = MinecraftServer.currentTick;
+            // Alphheim End
+
             packetdataserializer = new PacketDataSerializer(Unpooled.wrappedBuffer(packetplayincustompayload.b()));
 
             try {
@@ -2008,6 +2017,13 @@ public class PlayerConnection implements PacketListenerPlayIn, IUpdatePlayerList
 
             return;
         } else if ("MC|BSign".equals(packetplayincustompayload.a())) {
+            // Alphheim Start
+            if (this.lastBookTick + 20 > MinecraftServer.currentTick) {
+                this.disconnect("Book edited too quickly!");
+                return;
+            }
+            this.lastBookTick = MinecraftServer.currentTick;
+            // Alphheim End
             packetdataserializer = new PacketDataSerializer(Unpooled.wrappedBuffer(packetplayincustompayload.b()));
 
             try {
diff --git a/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaBook.java b/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaBook.java
index 0b5ada011..2358e7ef8 100644
--- a/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaBook.java
+++ b/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaBook.java
@@ -33,8 +33,11 @@ public class CraftMetaBook extends CraftMetaItem implements BookMeta {
     static final ItemMetaKey BOOK_PAGES = new ItemMetaKey("pages");
     static final ItemMetaKey RESOLVED = new ItemMetaKey("resolved");
     static final ItemMetaKey GENERATION = new ItemMetaKey("generation");
-    static final int MAX_PAGE_LENGTH = Short.MAX_VALUE; // TODO: Check me
-    static final int MAX_TITLE_LENGTH = 0xffff;
+    // Alphheim Start - backport book patches
+    static final int MAX_PAGES = 50;
+    static final int MAX_PAGE_LENGTH = 320; // 256 limit + 64 characters to allow for psuedo colour codes
+    static final int MAX_TITLE_LENGTH = 32;
+    // Alphheim End
 
     protected String title;
     protected String author;
@@ -225,6 +228,12 @@ public class CraftMetaBook extends CraftMetaItem implements BookMeta {
 
     public void addPage(final String... pages) {
         for (String page : pages) {
+            // Alphheim Start - backport book patches
+            if (this.pages.size() >= MAX_PAGES) {
+                return;
+            }
+            // Alphheim end
+
             if (page == null) {
                 page = "";
             } else if (page.length() > MAX_PAGE_LENGTH) {
-- 
2.15.1

