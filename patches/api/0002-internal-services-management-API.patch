From 787406a6f6ef879e533bf4f8b4ddf834e097cf55 Mon Sep 17 00:00:00 2001
From: Shane Freeder <theboyetronic@gmail.com>
Date: Sun, 17 Dec 2017 08:13:55 +0000
Subject: [PATCH] internal services management API

---
 src/main/java/org/bukkit/Bukkit.java          | 13 ++++++
 src/main/java/org/bukkit/Server.java          | 13 ++++++
 .../bukkit/plugin/SimplePluginManager.java    |  9 ++++
 .../java/pw/valaria/api/services/Chat.java    |  9 ++++
 .../valaria/api/services/InternalService.java |  6 +++
 .../api/services/InternalServiceHolder.java   | 43 +++++++++++++++++++
 .../api/services/InternalServicesManager.java | 23 ++++++++++
 7 files changed, 116 insertions(+)
 create mode 100644 src/main/java/pw/valaria/api/services/Chat.java
 create mode 100644 src/main/java/pw/valaria/api/services/InternalService.java
 create mode 100644 src/main/java/pw/valaria/api/services/InternalServiceHolder.java
 create mode 100644 src/main/java/pw/valaria/api/services/InternalServicesManager.java

diff --git a/src/main/java/org/bukkit/Bukkit.java b/src/main/java/org/bukkit/Bukkit.java
index 355bd2e2..8ca37b97 100644
--- a/src/main/java/org/bukkit/Bukkit.java
+++ b/src/main/java/org/bukkit/Bukkit.java
@@ -50,6 +50,8 @@ import org.bukkit.util.CachedServerIcon;
 import org.jetbrains.annotations.Contract;
 import org.jetbrains.annotations.NotNull;
 import org.jetbrains.annotations.Nullable;
+import pw.valaria.api.services.InternalService;
+import pw.valaria.api.services.InternalServicesManager;
 
 /**
  * Represents the Bukkit core, for version and Server singleton handling
@@ -1623,4 +1625,15 @@ public final class Bukkit {
     public static Server.Spigot spigot() {
         return server.spigot();
     }
+
+    // Alphheim start
+
+    /**
+     * @return the internal services manager
+     */
+    @NotNull
+    public static InternalServicesManager getInternalServices() {
+        return server.getInternalServices();
+    }
+    // Alphheim end
 }
diff --git a/src/main/java/org/bukkit/Server.java b/src/main/java/org/bukkit/Server.java
index 98e7ba90..e5948951 100644
--- a/src/main/java/org/bukkit/Server.java
+++ b/src/main/java/org/bukkit/Server.java
@@ -51,6 +51,7 @@ import org.bukkit.util.CachedServerIcon;
 import org.jetbrains.annotations.Contract;
 import org.jetbrains.annotations.NotNull;
 import org.jetbrains.annotations.Nullable;
+import pw.valaria.api.services.InternalServicesManager;
 
 /**
  * Represents a server implementation.
@@ -1416,4 +1417,16 @@ public interface Server extends PluginMessageRecipient {
      */
     int getCurrentTick();
     // Paper end
+
+    // Alphheim start
+    /**
+     * This system is primarily designed to deal with cases where we may wish
+     * to completely replace how something in the server is handled, while
+     * providing a default implementation in the server as a fallback to one being registered.
+     *
+     * @return the {@link InternalServicesManager} used in the server
+     */
+    @NotNull
+    InternalServicesManager getInternalServices();
+    // Alphheim end
 }
diff --git a/src/main/java/org/bukkit/plugin/SimplePluginManager.java b/src/main/java/org/bukkit/plugin/SimplePluginManager.java
index 8d54d561..bbebf972 100644
--- a/src/main/java/org/bukkit/plugin/SimplePluginManager.java
+++ b/src/main/java/org/bukkit/plugin/SimplePluginManager.java
@@ -485,6 +485,15 @@ public final class SimplePluginManager implements PluginManager {
                         + plugin.getDescription().getFullName() + " (Is it up to date?)", ex, plugin); // Paper
             }
 
+            // Alphheim start - internal services
+            try {
+                server.getInternalServices().unregisterServices(plugin);
+            } catch (Throwable ex) {
+                handlePluginException("Error occurred (in the plugin loader) while unregistering internal services for "
+                        + plugin.getDescription().getFullName() + " (Is it up to date?)", ex, plugin); // Paper
+            }
+            // Alphheim stop
+
             try {
                 HandlerList.unregisterAll(plugin);
             } catch (Throwable ex) {
diff --git a/src/main/java/pw/valaria/api/services/Chat.java b/src/main/java/pw/valaria/api/services/Chat.java
new file mode 100644
index 00000000..c7381d36
--- /dev/null
+++ b/src/main/java/pw/valaria/api/services/Chat.java
@@ -0,0 +1,9 @@
+package pw.valaria.api.services;
+
+import org.bukkit.entity.Player;
+import org.jetbrains.annotations.NotNull;
+
+public interface Chat extends InternalService {
+
+    void process(@NotNull Player sender, @NotNull String message);
+}
diff --git a/src/main/java/pw/valaria/api/services/InternalService.java b/src/main/java/pw/valaria/api/services/InternalService.java
new file mode 100644
index 00000000..d9f58faf
--- /dev/null
+++ b/src/main/java/pw/valaria/api/services/InternalService.java
@@ -0,0 +1,6 @@
+package pw.valaria.api.services;
+
+public interface InternalService {
+
+    default void onDisable(){};
+}
diff --git a/src/main/java/pw/valaria/api/services/InternalServiceHolder.java b/src/main/java/pw/valaria/api/services/InternalServiceHolder.java
new file mode 100644
index 00000000..c3e405b0
--- /dev/null
+++ b/src/main/java/pw/valaria/api/services/InternalServiceHolder.java
@@ -0,0 +1,43 @@
+package pw.valaria.api.services;
+
+import org.bukkit.plugin.Plugin;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
+public class InternalServiceHolder<T extends InternalService> {
+
+    @NotNull private T internalService;
+    @Nullable private Plugin plugin;
+
+    public InternalServiceHolder(@NotNull T internalService) {
+        this(internalService, null);
+    }
+
+    public InternalServiceHolder(@NotNull T internalService, @Nullable Plugin plugin) {
+        this.internalService = internalService;
+        this.plugin = plugin;
+    }
+
+    @NotNull
+    public T getInternalService() {
+        return internalService;
+    }
+
+    @Nullable
+    public Plugin getPlugin() {
+        return plugin;
+    }
+
+    @Override
+    public boolean equals(Object obj) {
+        return this == obj || (obj instanceof InternalServiceHolder && ((InternalServiceHolder) obj).internalService == this.internalService);
+    }
+
+    @Override
+    public String toString() {
+        return "InternalServiceHolder{" +
+                "internalService=" + internalService.getClass().getName() +
+                ", plugin=" + plugin +
+                '}';
+    }
+}
diff --git a/src/main/java/pw/valaria/api/services/InternalServicesManager.java b/src/main/java/pw/valaria/api/services/InternalServicesManager.java
new file mode 100644
index 00000000..6a1c05f4
--- /dev/null
+++ b/src/main/java/pw/valaria/api/services/InternalServicesManager.java
@@ -0,0 +1,23 @@
+package pw.valaria.api.services;
+
+import org.bukkit.plugin.Plugin;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
+public interface InternalServicesManager {
+    <T extends InternalService> void registerDefaultService(@NotNull Class<T> serviceType, @NotNull T service);
+
+
+    <T extends InternalService> boolean registerService(@NotNull Class<T> serviceType, @NotNull T service, @Nullable Plugin owningPlugin);
+
+    <T extends InternalService> boolean registerService(@NotNull Class<T> serviceType, @Nullable T service, @Nullable Plugin owningPlugin, boolean force);
+
+    @Nullable
+    <T extends InternalService> T getService(@NotNull Class<T> serviceType);
+
+    @Nullable
+    <T extends InternalService> T unregisterService(@NotNull Class<T> serviceType, @NotNull T service);
+
+    boolean unregisterServices(@NotNull Plugin owningPlugin);
+
+}
-- 
2.25.0

