From bca54d5a719ee7b918334e077bf055c3ca6a8984 Mon Sep 17 00:00:00 2001
From: Shane Freeder <theboyetronic@gmail.com>
Date: Sun, 17 Dec 2017 08:07:57 +0000
Subject: [PATCH] Implement internal services management API

---
 .../net/minecraft/server/DedicatedServer.java |   1 +
 .../minecraft/server/PlayerConnection.java    |  75 ++---------
 .../org/bukkit/craftbukkit/CraftServer.java   |  17 +++
 .../CraftInternalServicesManager.java         | 118 ++++++++++++++++++
 .../services/defaults/VanillaChat.java        | 104 +++++++++++++++
 5 files changed, 251 insertions(+), 64 deletions(-)
 create mode 100644 src/main/java/pw/valaria/services/CraftInternalServicesManager.java
 create mode 100644 src/main/java/pw/valaria/services/defaults/VanillaChat.java

diff --git a/src/main/java/net/minecraft/server/DedicatedServer.java b/src/main/java/net/minecraft/server/DedicatedServer.java
index 6da54a64b..fa1ea3956 100644
--- a/src/main/java/net/minecraft/server/DedicatedServer.java
+++ b/src/main/java/net/minecraft/server/DedicatedServer.java
@@ -215,6 +215,7 @@ public class DedicatedServer extends MinecraftServer implements IMinecraftServer
 
         // CraftBukkit start
         // this.a((PlayerList) (new DedicatedPlayerList(this))); // Spigot - moved up
+        server.initInternalServices(); // Alphheim
         server.loadPlugins();
         server.enablePlugins(org.bukkit.plugin.PluginLoadOrder.STARTUP);
         // CraftBukkit end
diff --git a/src/main/java/net/minecraft/server/PlayerConnection.java b/src/main/java/net/minecraft/server/PlayerConnection.java
index 9cf6cc53f..52daf63b7 100644
--- a/src/main/java/net/minecraft/server/PlayerConnection.java
+++ b/src/main/java/net/minecraft/server/PlayerConnection.java
@@ -63,6 +63,7 @@ import com.destroystokyo.paper.event.player.IllegalPacketEvent; // Paper
 import com.destroystokyo.paper.event.player.PlayerJumpEvent; // Paper
 import co.aikar.timings.MinecraftTimings; // Paper
 // CraftBukkit end
+import pw.valaria.api.services.Chat; // Alphheim
 
 public class PlayerConnection implements PacketListenerPlayIn {
 
@@ -1708,73 +1709,19 @@ public class PlayerConnection implements PacketListenerPlayIn {
         } else if (this.player.getChatFlags() == EnumChatVisibility.SYSTEM) {
             // Do nothing, this is coming from a plugin
         } else {
-            Player player = this.getPlayer();
-            AsyncPlayerChatEvent event = new AsyncPlayerChatEvent(async, player, s, new LazyPlayerSet(minecraftServer));
-            this.server.getPluginManager().callEvent(event);
-
-            if (PlayerChatEvent.getHandlerList().getRegisteredListeners().length != 0) {
-                // Evil plugins still listening to deprecated event
-                final PlayerChatEvent queueEvent = new PlayerChatEvent(player, event.getMessage(), event.getFormat(), event.getRecipients());
-                queueEvent.setCancelled(event.isCancelled());
-                Waitable waitable = new Waitable() {
-                    @Override
-                    protected Object evaluate() {
-                        org.bukkit.Bukkit.getPluginManager().callEvent(queueEvent);
-
-                        if (queueEvent.isCancelled()) {
-                            return null;
-                        }
-
-                        String message = String.format(queueEvent.getFormat(), queueEvent.getPlayer().getDisplayName(), queueEvent.getMessage());
-                        PlayerConnection.this.minecraftServer.console.sendMessage(message);
-                        if (((LazyPlayerSet) queueEvent.getRecipients()).isLazy()) {
-                            for (Object player : PlayerConnection.this.minecraftServer.getPlayerList().players) {
-                                ((EntityPlayer) player).sendMessage(CraftChatMessage.fromString(message));
-                            }
-                        } else {
-                            for (Player player : queueEvent.getRecipients()) {
-                                player.sendMessage(message);
-                            }
-                        }
-                        return null;
-                    }};
-                if (async) {
-                    minecraftServer.processQueue.add(waitable);
-                } else {
-                    waitable.run();
-                }
                 try {
-                    waitable.get();
-                } catch (InterruptedException e) {
-                    Thread.currentThread().interrupt(); // This is proper habit for java. If we aren't handling it, pass it on!
-                } catch (ExecutionException e) {
-                    throw new RuntimeException("Exception processing chat event", e.getCause());
-                }
-            } else {
-                if (event.isCancelled()) {
-                    return;
-                }
 
-                // Paper Start - (Meh) Support for vanilla world scoreboard name coloring
-                String displayName = event.getPlayer().getDisplayName();
-                if (this.player.getWorld().paperConfig.useVanillaScoreboardColoring) {
-                    IChatBaseComponent nameFromTeam = ScoreboardTeam.a(this.player.getScoreboardTeam(),((CraftPlayer) player).getHandle().getDisplayName());
-                    // Explicitly add a RESET here, vanilla uses components for this now...
-                    displayName = CraftChatMessage.fromComponent(nameFromTeam, EnumChatFormat.WHITE) + org.bukkit.ChatColor.RESET;
-                }
-
-                s = String.format(event.getFormat(), displayName, event.getMessage());
-                // Paper end
-                minecraftServer.console.sendMessage(s);
-                if (((LazyPlayerSet) event.getRecipients()).isLazy()) {
-                    for (Object recipient : minecraftServer.getPlayerList().players) {
-                        ((EntityPlayer) recipient).sendMessage(CraftChatMessage.fromString(s));
-                    }
-                } else {
-                    for (Player recipient : event.getRecipients()) {
-                        recipient.sendMessage(s);
+                    // alphheim start
+                    Chat service = server.getInternalServices().getService(Chat.class);
+                    if (service == null) {
+                        player.sendMessage(new ChatMessage(org.bukkit.ChatColor.RED + "An internal error has occured!"));
+                        MinecraftServer.LOGGER.warn("A chat service has not been registered!");
+                    } else {
+                        service.process(this.getPlayer(), s);
                     }
-                }
+            } catch (Exception ex) {
+                ex.printStackTrace();
+                // Alphheim end
             }
         }
     }
diff --git a/src/main/java/org/bukkit/craftbukkit/CraftServer.java b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
index c60e90d49..d920c65e1 100644
--- a/src/main/java/org/bukkit/craftbukkit/CraftServer.java
+++ b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
@@ -195,6 +195,9 @@ import org.yaml.snakeyaml.constructor.SafeConstructor;
 import org.yaml.snakeyaml.error.MarkedYAMLException;
 
 import net.md_5.bungee.api.chat.BaseComponent; // Spigot
+import pw.valaria.api.services.Chat; // Alphheim
+import pw.valaria.services.CraftInternalServicesManager; // Alphheim
+import pw.valaria.services.defaults.VanillaChat; // Alphheim
 
 import javax.annotation.Nullable; // Paper
 import javax.annotation.Nonnull; // Paper
@@ -237,6 +240,7 @@ public final class CraftServer implements Server {
     public int reloadCount;
     public static Exception excessiveVelEx; // Paper - Velocity warnings
 
+    private final CraftInternalServicesManager internalServices = new CraftInternalServicesManager(); // Alphheim
     static {
         ConfigurationSerialization.registerClass(CraftOfflinePlayer.class);
         CraftItemFactory.instance();
@@ -813,6 +817,7 @@ public final class CraftServer implements Server {
 
         Plugin[] pluginClone = pluginManager.getPlugins().clone(); // Paper
         pluginManager.clearPlugins();
+        internalServices.reset();
         commandMap.clearCommands();
 
         // Paper start
@@ -854,6 +859,7 @@ public final class CraftServer implements Server {
                 "This plugin is not properly shutting down its async tasks when it is being reloaded.  This may cause conflicts with the newly loaded version of the plugin"
             ));
         }
+        initInternalServices(); // Alphheim
         loadPlugins();
         enablePlugins(PluginLoadOrder.STARTUP);
         enablePlugins(PluginLoadOrder.POSTWORLD);
@@ -2161,4 +2167,15 @@ public final class CraftServer implements Server {
         return new com.destroystokyo.paper.profile.CraftPlayerProfile(uuid, name);
     }
     // Paper end
+    // Alphheim start
+
+    @Override
+    public CraftInternalServicesManager getInternalServices() {
+        return internalServices;
+    }
+
+    public void initInternalServices() {
+        getInternalServices().registerDefaultService(Chat.class, new VanillaChat());
+    }
+    // Alphheim end
 }
diff --git a/src/main/java/pw/valaria/services/CraftInternalServicesManager.java b/src/main/java/pw/valaria/services/CraftInternalServicesManager.java
new file mode 100644
index 000000000..c7bd45647
--- /dev/null
+++ b/src/main/java/pw/valaria/services/CraftInternalServicesManager.java
@@ -0,0 +1,118 @@
+package pw.valaria.services;
+
+import com.google.common.base.Preconditions;
+import net.minecraft.server.MinecraftServer;
+import org.bukkit.plugin.Plugin;
+import pw.valaria.api.services.InternalService;
+import pw.valaria.api.services.InternalServiceHolder;
+import pw.valaria.api.services.InternalServicesManager;
+
+import java.util.ArrayList;
+import java.util.HashMap;
+import java.util.Iterator;
+import java.util.List;
+import java.util.Map;
+
+@SuppressWarnings("unchecked")
+public class CraftInternalServicesManager implements InternalServicesManager {
+
+    private Map<Class<? extends InternalService>, InternalServiceHolder<? extends InternalService>> registeredServices = new HashMap<>();
+    private Map<Class<? extends InternalService>, InternalServiceHolder<? extends InternalService>> defaultServices = new HashMap<>();
+
+
+    public <T extends InternalService> void registerDefaultService(Class<T> serviceType, T service) {
+        Preconditions.checkArgument(InternalService.class.isAssignableFrom(serviceType), serviceType.getName() + " is not applicable to the type" + InternalService.class.getName());
+
+        InternalServiceHolder internalService = defaultServices.get((Class<? extends InternalService>) serviceType);
+        if (internalService != null) {
+            throw new IllegalStateException("A default service for " + serviceType.getName() + " is already registered!");
+        }
+
+        defaultServices.put(serviceType, new InternalServiceHolder<>(service));
+
+    }
+
+    public void reset() {
+        registeredServices.forEach((aClass, internalServiceHolder) -> {
+            try {
+                internalServiceHolder.getInternalService().onDisable();
+            } catch (Exception ex) {
+                ex.printStackTrace();
+            }
+        });
+        registeredServices.clear();
+
+        defaultServices.forEach((aClass, internalServiceHolder) -> {
+            try {
+                internalServiceHolder.getInternalService().onDisable();
+            } catch (Exception ex) {
+                ex.printStackTrace();
+            }
+        });
+        defaultServices.clear();
+    }
+
+
+    public <T extends InternalService> boolean registerService(Class<T> serviceType, T service, Plugin owningPlugin) {
+        return registerService(serviceType, service, owningPlugin, false);
+    }
+
+    public <T extends InternalService> boolean registerService(Class<T> serviceType, T service, Plugin owningPlugin, boolean force) {
+        Preconditions.checkArgument(InternalService.class.isAssignableFrom(serviceType), serviceType.getName() + " is not applicable to the type" + InternalService.class.getName());
+
+        if (!force) {
+            InternalServiceHolder internalService = defaultServices.get(serviceType);
+            if (internalService != null) {
+                throw new IllegalStateException("A default service for " + serviceType.getName() + " is already registered!");
+            }
+        }
+
+        return registeredServices.put(serviceType, new InternalServiceHolder<>(service, owningPlugin)) != null;
+    }
+
+    public <T extends InternalService> T getService(Class<T> serviceType) {
+        InternalServiceHolder<? extends InternalService> internalServiceHolder = defaultServices.get(serviceType);
+
+        if (internalServiceHolder != null) {
+            return (T) internalServiceHolder.getInternalService();
+        } else {
+            internalServiceHolder = registeredServices.get(serviceType);
+            return internalServiceHolder != null ? (T) internalServiceHolder.getInternalService() : null;
+        }
+    }
+
+    public <T extends InternalService> T unregisterService(Class<T> serviceType, T service) {
+        T registeredService = getService(serviceType);
+
+        if (registeredService == null) return null;
+
+        if (service.equals(registeredService)) {
+            return (T) registeredServices.remove(serviceType);
+        }
+
+        return null;
+    }
+
+    public boolean unregisterServices(Plugin owningPlugin) {
+
+        boolean hasRemoved = false;
+        Iterator<Map.Entry<Class<? extends InternalService>, InternalServiceHolder<? extends InternalService>>> iterator = registeredServices.entrySet().iterator();
+
+        while (iterator.hasNext()) {
+            InternalServiceHolder internalServiceHolder = iterator.next().getValue();
+            if (internalServiceHolder.getPlugin() != owningPlugin) continue;
+            hasRemoved = true;
+            try {
+                internalServiceHolder.getInternalService().onDisable();
+            } catch (Throwable ex) {
+                MinecraftServer.LOGGER.warn("An error has occurred while disabling the internal service: " + internalServiceHolder.toString());
+            }
+            iterator.remove();
+        }
+
+        return hasRemoved;
+
+    }
+
+
+}
diff --git a/src/main/java/pw/valaria/services/defaults/VanillaChat.java b/src/main/java/pw/valaria/services/defaults/VanillaChat.java
new file mode 100644
index 000000000..ba97f56ea
--- /dev/null
+++ b/src/main/java/pw/valaria/services/defaults/VanillaChat.java
@@ -0,0 +1,104 @@
+package pw.valaria.services.defaults;
+
+import net.minecraft.server.EntityPlayer;
+import net.minecraft.server.EnumChatFormat;
+import net.minecraft.server.IChatBaseComponent;
+import net.minecraft.server.MinecraftServer;
+import net.minecraft.server.PlayerConnection;
+import net.minecraft.server.ScoreboardTeam;
+import net.minecraft.server.World;
+
+import org.bukkit.Bukkit;
+import org.bukkit.craftbukkit.CraftServer;
+import org.bukkit.craftbukkit.CraftWorld;
+import org.bukkit.craftbukkit.entity.CraftPlayer;
+import org.bukkit.craftbukkit.util.CraftChatMessage;
+import org.bukkit.craftbukkit.util.LazyPlayerSet;
+import org.bukkit.craftbukkit.util.Waitable;
+import org.bukkit.entity.Player;
+import org.bukkit.event.player.AsyncPlayerChatEvent;
+import org.bukkit.event.player.PlayerChatEvent;
+import pw.valaria.api.services.Chat;
+
+import java.util.Set;
+import java.util.concurrent.ExecutionException;
+
+public class VanillaChat implements Chat {
+    private CraftServer server = (CraftServer) Bukkit.getServer(); // Easiest way without using a deprecated singleton..
+
+    @Override
+    public void process(Player sender, String message) {
+        if (!(sender instanceof CraftPlayer)) {
+            server.getLogger().warning( sender.getName() + " is not a CraftPlayer but tried to chat?!");
+            return;
+        }
+
+        CraftPlayer player = (CraftPlayer) sender;
+
+        boolean async = !Bukkit.getServer().isPrimaryThread();
+        AsyncPlayerChatEvent event = new AsyncPlayerChatEvent(async, sender, message, new LazyPlayerSet(server.getServer()));
+        server.getPluginManager().callEvent(event);
+
+        if (PlayerChatEvent.getHandlerList().getRegisteredListeners().length != 0) {
+            // Evil plugins still listening to deprecated event
+            final PlayerChatEvent queueEvent = new PlayerChatEvent(sender, event.getMessage(), event.getFormat(), event.getRecipients());
+            queueEvent.setCancelled(event.isCancelled());
+            Waitable waitable = new Waitable() {
+                @Override
+                protected Object evaluate() {
+                    org.bukkit.Bukkit.getPluginManager().callEvent(queueEvent);
+
+                    if (queueEvent.isCancelled()) {
+                        return null;
+                    }
+
+                    String message = String.format(queueEvent.getFormat(), queueEvent.getPlayer().getDisplayName(), queueEvent.getMessage());
+                    server.getServer().console.sendMessage(message);
+                    sendMessage(message, queueEvent.getRecipients(), event);
+                    return null;
+                }};
+            if (async) {
+                server.getServer().processQueue.add(waitable);
+            } else {
+                waitable.run();
+            }
+            try {
+                waitable.get();
+            } catch (InterruptedException e) {
+                Thread.currentThread().interrupt(); // This is proper habit for java. If we aren't handling it, pass it on!
+            } catch (ExecutionException e) {
+                throw new RuntimeException("Exception processing chat event", e.getCause());
+            }
+        } else {
+            if (event.isCancelled()) {
+                return;
+            }
+
+            // Paper Start - (Meh) Support for vanilla world scoreboard name coloring
+            String displayName = event.getPlayer().getDisplayName();
+            if (player.getHandle().getWorld().paperConfig.useVanillaScoreboardColoring) {
+                IChatBaseComponent nameFromTeam = ScoreboardTeam.a(((CraftPlayer) sender).getHandle().getScoreboardTeam(),((CraftPlayer) player).getHandle().getDisplayName());
+                // Explicitly add a RESET here, vanilla uses components for this now...
+                displayName = CraftChatMessage.fromComponent(nameFromTeam, EnumChatFormat.WHITE) + org.bukkit.ChatColor.RESET;
+            }
+
+            message = String.format(event.getFormat(), displayName, event.getMessage());
+            // Paper end
+            server.getServer().console.sendMessage(message);
+            sendMessage(message, event.getRecipients(), event);
+        }
+
+    }
+
+    private void sendMessage(String message, Set<Player> recipients, AsyncPlayerChatEvent event) {
+        if (((LazyPlayerSet) recipients).isLazy()) {
+            for (Object recipient : server.getServer().getPlayerList().players) {
+                ((EntityPlayer) recipient).sendMessage(CraftChatMessage.fromString(message));
+            }
+        } else {
+            for (Player recipient : recipients) {
+                recipient.sendMessage(message);
+            }
+        }
+    }
+}
-- 
2.22.0

